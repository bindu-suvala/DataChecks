import { useState } from "react";
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle, 
  DialogFooter 
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { 
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";

interface TaskModalProps {
  isOpen: boolean;
  onClose: () => void;
  editTaskId?: number;
}

const TaskModal = ({ isOpen, onClose, editTaskId }: TaskModalProps) => {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  
  const [formData, setFormData] = useState({
    name: "",
    projectId: "",
    assignee: "",
    priority: "",
    dueDate: "",
    description: "",
  });
  
  const { data: projects = [] } = useQuery({ 
    queryKey: ['/api/projects'],
  });
  
  const { data: assignees = [] } = useQuery({ 
    queryKey: ['/api/users'],
  });
  
  const createTaskMutation = useMutation({
    mutationFn: (taskData: any) => apiRequest('POST', '/api/tasks', taskData),
    onSuccess: async () => {
      queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });
      toast({
        title: "Success",
        description: "Task was created successfully",
      });
      handleClose();
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: `Failed to create task: ${error.message}`,
        variant: "destructive",
      });
    },
  });
  
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  const handleSelectChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    createTaskMutation.mutate(formData);
  };
  
  const handleClose = () => {
    setFormData({
      name: "",
      projectId: "",
      assignee: "",
      priority: "",
      dueDate: "",
      description: "",
    });
    onClose();
  };
  
  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-lg">
        <DialogHeader>
          <DialogTitle className="text-lg leading-6 font-medium text-primary-900">
            {editTaskId ? "Edit Task" : "Add New Task"}
          </DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="mt-4 space-y-4">
          <div>
            <Label htmlFor="task-name" className="block text-sm font-medium text-primary-700">
              Task Name
            </Label>
            <Input
              id="task-name"
              name="name"
              value={formData.name}
              onChange={handleInputChange}
              placeholder="Enter task name"
              className="mt-1"
              required
            />
          </div>
          <div>
            <Label htmlFor="task-project" className="block text-sm font-medium text-primary-700">
              Project
            </Label>
            <Select
              value={formData.projectId}
              onValueChange={(value) => handleSelectChange("projectId", value)}
            >
              <SelectTrigger id="task-project" className="w-full mt-1">
                <SelectValue placeholder="Select a project" />
              </SelectTrigger>
              <SelectContent>
                <SelectGroup>
                  {projects.map((project) => (
                    <SelectItem key={project.id} value={project.id.toString()}>
                      {project.name}
                    </SelectItem>
                  ))}
                </SelectGroup>
              </SelectContent>
            </Select>
          </div>
          <div>
            <Label htmlFor="task-assignee" className="block text-sm font-medium text-primary-700">
              Assignee
            </Label>
            <Select
              value={formData.assignee}
              onValueChange={(value) => handleSelectChange("assignee", value)}
            >
              <SelectTrigger id="task-assignee" className="w-full mt-1">
                <SelectValue placeholder="Select an assignee" />
              </SelectTrigger>
              <SelectContent>
                <SelectGroup>
                  {assignees.map((assignee) => (
                    <SelectItem key={assignee.id} value={assignee.name}>
                      {assignee.name}
                    </SelectItem>
                  ))}
                </SelectGroup>
              </SelectContent>
            </Select>
          </div>
          <div>
            <Label htmlFor="task-priority" className="block text-sm font-medium text-primary-700">
              Priority
            </Label>
            <Select
              value={formData.priority}
              onValueChange={(value) => handleSelectChange("priority", value)}
            >
              <SelectTrigger id="task-priority" className="w-full mt-1">
                <SelectValue placeholder="Select priority" />
              </SelectTrigger>
              <SelectContent>
                <SelectGroup>
                  <SelectItem value="Low">Low</SelectItem>
                  <SelectItem value="Medium">Medium</SelectItem>
                  <SelectItem value="High">High</SelectItem>
                </SelectGroup>
              </SelectContent>
            </Select>
          </div>
          <div>
            <Label htmlFor="task-due-date" className="block text-sm font-medium text-primary-700">
              Due Date
            </Label>
            <Input
              type="date"
              id="task-due-date"
              name="dueDate"
              value={formData.dueDate}
              onChange={handleInputChange}
              className="mt-1"
              required
            />
          </div>
          <div>
            <Label htmlFor="task-description" className="block text-sm font-medium text-primary-700">
              Description
            </Label>
            <Textarea
              id="task-description"
              name="description"
              rows={3}
              value={formData.description}
              onChange={handleInputChange}
              placeholder="Task details..."
              className="mt-1"
            />
          </div>
          <DialogFooter className="mt-6">
            <Button
              type="button"
              variant="outline"
              onClick={handleClose}
              className="mt-3 w-full sm:mt-0 sm:w-auto"
            >
              Cancel
            </Button>
            <Button
              type="submit"
              className="w-full bg-accent-600 hover:bg-accent-700 text-white sm:ml-3 sm:w-auto"
              disabled={createTaskMutation.isPending}
            >
              {createTaskMutation.isPending ? "Saving..." : "Save Task"}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default TaskModal;
