import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Skeleton } from "@/components/ui/skeleton";
import { Link } from "wouter";

interface Project {
  id: number;
  name: string;
  client: string;
  status: string;
  completedTasks: number;
  totalTasks: number;
  dueDate: string;
}

interface ProjectListProps {
  projects: Project[];
  loading?: boolean;
}

const ProjectList = ({ projects, loading = false }: ProjectListProps) => {
  return (
    <Card>
      <CardHeader className="px-4 py-5 border-b border-gray-200 sm:px-6">
        <CardTitle className="text-lg leading-6 font-medium text-primary-900">Recent Projects</CardTitle>
      </CardHeader>
      <div className="overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow className="bg-primary-50">
              <TableHead className="px-6 py-3 text-left text-xs font-medium text-primary-500 uppercase tracking-wider">
                Project
              </TableHead>
              <TableHead className="px-6 py-3 text-left text-xs font-medium text-primary-500 uppercase tracking-wider">
                Status
              </TableHead>
              <TableHead className="px-6 py-3 text-left text-xs font-medium text-primary-500 uppercase tracking-wider">
                Tasks
              </TableHead>
              <TableHead className="px-6 py-3 text-left text-xs font-medium text-primary-500 uppercase tracking-wider">
                Due Date
              </TableHead>
              <TableHead className="relative px-6 py-3">
                <span className="sr-only">Actions</span>
              </TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {loading ? (
              Array(4).fill(0).map((_, index) => (
                <TableRow key={index}>
                  <TableCell className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <Skeleton className="h-10 w-10 rounded-md" />
                      <div className="ml-4">
                        <Skeleton className="h-4 w-32" />
                        <Skeleton className="h-3 w-24 mt-1" />
                      </div>
                    </div>
                  </TableCell>
                  <TableCell className="px-6 py-4 whitespace-nowrap">
                    <Skeleton className="h-4 w-16" />
                  </TableCell>
                  <TableCell className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <Skeleton className="h-2.5 w-16 rounded-full" />
                      <Skeleton className="h-4 w-10 ml-2" />
                    </div>
                  </TableCell>
                  <TableCell className="px-6 py-4 whitespace-nowrap">
                    <Skeleton className="h-4 w-20" />
                  </TableCell>
                  <TableCell className="px-6 py-4 whitespace-nowrap text-right">
                    <Skeleton className="h-4 w-10 ml-auto" />
                  </TableCell>
                </TableRow>
              ))
            ) : (
              projects.slice(0, 4).map((project) => (
                <TableRow key={project.id}>
                  <TableCell className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <div className={`flex-shrink-0 h-10 w-10 ${getProjectColor(project.name)} rounded-md flex items-center justify-center`}>
                        <span className={`text-${getProjectColor(project.name).replace('bg-', '')}-700 font-medium`}>{getInitials(project.name)}</span>
                      </div>
                      <div className="ml-4">
                        <div className="text-sm font-medium text-primary-900">{project.name}</div>
                        <div className="text-sm text-primary-500">{project.client}</div>
                      </div>
                    </div>
                  </TableCell>
                  <TableCell className="px-6 py-4 whitespace-nowrap">
                    <StatusBadge status={project.status} />
                  </TableCell>
                  <TableCell className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <Progress 
                        value={Math.round((project.completedTasks / project.totalTasks) * 100)} 
                        className="w-16 h-2.5"
                        indicatorClassName={getProgressColor(project.status)}
                      />
                      <span className="ml-2 text-sm text-primary-500">
                        {project.completedTasks}/{project.totalTasks}
                      </span>
                    </div>
                  </TableCell>
                  <TableCell className="px-6 py-4 whitespace-nowrap text-sm text-primary-500">
                    {project.dueDate}
                  </TableCell>
                  <TableCell className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <Button variant="link" className="text-accent-600 hover:text-accent-900">View</Button>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>
      <CardFooter className="px-4 py-4 border-t border-gray-200 sm:px-6">
        <div className="flex items-center justify-between">
          <div className="text-sm text-primary-700">
            Showing {Math.min(projects.length, 4)} of {projects.length} projects
          </div>
          <div>
            <Link href="/projects">
              <Button variant="outline" className="text-primary-700">
                View All Projects
              </Button>
            </Link>
          </div>
        </div>
      </CardFooter>
    </Card>
  );
};

const StatusBadge = ({ status }: { status: string }) => {
  const variants: Record<string, string> = {
    'Active': 'bg-green-100 text-green-800',
    'In Progress': 'bg-yellow-100 text-yellow-800',
    'Delayed': 'bg-red-100 text-red-800',
    'Completed': 'bg-blue-100 text-blue-800',
  };

  return (
    <Badge variant="outline" className={`${variants[status] || 'bg-gray-100 text-gray-800'} px-2 inline-flex text-xs leading-5 font-semibold rounded-full`}>
      {status}
    </Badge>
  );
};

const getProgressColor = (status: string): string => {
  const colors: Record<string, string> = {
    'Active': 'bg-green-500',
    'In Progress': 'bg-yellow-500',
    'Delayed': 'bg-red-500',
    'Completed': 'bg-blue-500',
  };
  return colors[status] || 'bg-gray-500';
};

const getProjectColor = (name: string): string => {
  const colors = ['bg-accent-100', 'bg-blue-100', 'bg-purple-100', 'bg-red-100', 'bg-green-100', 'bg-yellow-100'];
  // Simple hash function to consistently pick a color based on the project name
  const index = name.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0) % colors.length;
  return colors[index];
};

const getInitials = (name: string): string => {
  return name
    .split(' ')
    .map(word => word[0])
    .join('')
    .substring(0, 2)
    .toUpperCase();
};

export default ProjectList;
