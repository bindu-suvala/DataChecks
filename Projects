import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { 
  Table, 
  TableHeader, 
  TableRow, 
  TableHead, 
  TableBody, 
  TableCell 
} from "@/components/ui/table";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { CalendarIcon, PlusIcon } from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";

const Projects = () => {
  const { data: projects = [], isLoading } = 
    useQuery({ queryKey: ['/api/projects'], });

  return (
    <>
      <div className="md:flex md:items-center md:justify-between mb-8">
        <div className="flex-1 min-w-0">
          <h1 className="text-2xl font-bold leading-7 text-primary-900 sm:text-3xl sm:truncate">
            Projects
          </h1>
          <div className="mt-1 flex flex-col sm:flex-row sm:flex-wrap sm:mt-0 sm:space-x-6">
            <div className="mt-2 flex items-center text-sm text-primary-500">
              <CalendarIcon className="flex-shrink-0 mr-1.5 h-5 w-5 text-primary-400" />
              Last updated: Today
            </div>
          </div>
        </div>
        <div className="mt-4 flex md:mt-0 md:ml-4">
          <Button className="bg-accent-600 hover:bg-accent-700">
            <PlusIcon className="mr-2 h-4 w-4" />
            New Project
          </Button>
        </div>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>All Projects</CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow className="bg-primary-50">
                <TableHead>Project</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Tasks</TableHead>
                <TableHead>Due Date</TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {isLoading ? (
                Array(4).fill(0).map((_, index) => (
                  <TableRow key={index}>
                    <TableCell>
                      <div className="flex items-center">
                        <Skeleton className="h-10 w-10 rounded-md" />
                        <div className="ml-4">
                          <Skeleton className="h-4 w-32" />
                          <Skeleton className="h-3 w-24 mt-1" />
                        </div>
                      </div>
                    </TableCell>
                    <TableCell><Skeleton className="h-4 w-16" /></TableCell>
                    <TableCell><Skeleton className="h-4 w-24" /></TableCell>
                    <TableCell><Skeleton className="h-4 w-20" /></TableCell>
                    <TableCell className="text-right"><Skeleton className="h-4 w-10 ml-auto" /></TableCell>
                  </TableRow>
                ))
              ) : (
                projects.map((project) => (
                  <TableRow key={project.id}>
                    <TableCell>
                      <div className="flex items-center">
                        <div className={`flex-shrink-0 h-10 w-10 ${getProjectColor(project.name)} rounded-md flex items-center justify-center`}>
                          <span className={`text-${getProjectColor(project.name).replace('bg-', '')}-700 font-medium`}>
                            {getProjectInitials(project.name)}
                          </span>
                        </div>
                        <div className="ml-4">
                          <div className="text-sm font-medium text-primary-900">{project.name}</div>
                          <div className="text-sm text-primary-500">{project.client}</div>
                        </div>
                      </div>
                    </TableCell>
                    <TableCell>
                      <StatusBadge status={project.status} />
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center">
                        <Progress 
                          value={Math.round((project.completedTasks / project.totalTasks) * 100)} 
                          className="w-16 h-2.5"
                          indicatorClassName={getProgressColor(project.status)}
                        />
                        <span className="ml-2 text-sm text-primary-500">
                          {project.completedTasks}/{project.totalTasks}
                        </span>
                      </div>
                    </TableCell>
                    <TableCell className="text-sm text-primary-500">{project.dueDate}</TableCell>
                    <TableCell className="text-right text-sm font-medium">
                      <Button variant="link" className="text-accent-600 hover:text-accent-900">View</Button>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </>
  );
};

const StatusBadge = ({ status }: { status: string }) => {
  const variants: Record<string, string> = {
    'Active': 'bg-green-100 text-green-800',
    'In Progress': 'bg-yellow-100 text-yellow-800',
    'Delayed': 'bg-red-100 text-red-800',
    'Completed': 'bg-blue-100 text-blue-800',
  };

  return (
    <Badge variant="outline" className={`${variants[status] || 'bg-gray-100 text-gray-800'} px-2 inline-flex text-xs leading-5 font-semibold rounded-full`}>
      {status}
    </Badge>
  );
};

const getProgressColor = (status: string): string => {
  const colors: Record<string, string> = {
    'Active': 'bg-green-500',
    'In Progress': 'bg-yellow-500',
    'Delayed': 'bg-red-500',
    'Completed': 'bg-blue-500',
  };
  return colors[status] || 'bg-gray-500';
};

const getProjectColor = (name: string): string => {
  const colors = ['bg-accent-100', 'bg-blue-100', 'bg-purple-100', 'bg-red-100', 'bg-green-100', 'bg-yellow-100'];
  // Simple hash function to consistently pick a color based on the project name
  const index = name.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0) % colors.length;
  return colors[index];
};

const getProjectInitials = (name: string): string => {
  return name
    .split(' ')
    .map(word => word[0])
    .join('')
    .substring(0, 2)
    .toUpperCase();
};

export default Projects;
