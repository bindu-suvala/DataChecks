import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { 
  Table, 
  TableHeader, 
  TableRow, 
  TableHead, 
  TableBody, 
  TableCell 
} from "@/components/ui/table";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Checkbox } from "@/components/ui/checkbox";
import { CalendarIcon, PlusIcon } from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";
import { 
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import TaskModal from "@/components/tasks/TaskModal";

const Tasks = () => {
  const [isTaskModalOpen, setIsTaskModalOpen] = useState(false);
  const [projectFilter, setProjectFilter] = useState<string | null>(null);

  const { data: tasks = [], isLoading: tasksLoading } = 
    useQuery({ queryKey: ['/api/tasks'], });

  const { data: projects = [], isLoading: projectsLoading } = 
    useQuery({ queryKey: ['/api/projects'], });

  const filteredTasks = projectFilter 
    ? tasks.filter(task => task.projectId === parseInt(projectFilter))
    : tasks;

  return (
    <>
      <div className="md:flex md:items-center md:justify-between mb-8">
        <div className="flex-1 min-w-0">
          <h1 className="text-2xl font-bold leading-7 text-primary-900 sm:text-3xl sm:truncate">
            Tasks
          </h1>
          <div className="mt-1 flex flex-col sm:flex-row sm:flex-wrap sm:mt-0 sm:space-x-6">
            <div className="mt-2 flex items-center text-sm text-primary-500">
              <CalendarIcon className="flex-shrink-0 mr-1.5 h-5 w-5 text-primary-400" />
              Last updated: Today
            </div>
          </div>
        </div>
        <div className="mt-4 flex md:mt-0 md:ml-4">
          <Button className="bg-accent-600 hover:bg-accent-700" onClick={() => setIsTaskModalOpen(true)}>
            <PlusIcon className="mr-2 h-4 w-4" />
            Add Task
          </Button>
        </div>
      </div>

      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle>All Tasks</CardTitle>
          <div className="flex space-x-3">
            <div className="relative min-w-[180px]">
              <Select onValueChange={(value) => setProjectFilter(value === "all" ? null : value)}>
                <SelectTrigger>
                  <SelectValue placeholder="All Projects" />
                </SelectTrigger>
                <SelectContent>
                  <SelectGroup>
                    <SelectItem value="all">All Projects</SelectItem>
                    {projects.map((project) => (
                      <SelectItem key={project.id} value={project.id.toString()}>
                        {project.name}
                      </SelectItem>
                    ))}
                  </SelectGroup>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow className="bg-primary-50">
                <TableHead>Task</TableHead>
                <TableHead>Project</TableHead>
                <TableHead>Assignee</TableHead>
                <TableHead>Priority</TableHead>
                <TableHead>Due Date</TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {tasksLoading || projectsLoading ? (
                Array(4).fill(0).map((_, index) => (
                  <TableRow key={index}>
                    <TableCell>
                      <div className="flex items-center">
                        <Skeleton className="h-4 w-4 rounded-sm" />
                        <Skeleton className="h-4 w-40 ml-3" />
                      </div>
                    </TableCell>
                    <TableCell><Skeleton className="h-4 w-24" /></TableCell>
                    <TableCell>
                      <div className="flex items-center">
                        <Skeleton className="h-8 w-8 rounded-full" />
                        <Skeleton className="h-4 w-24 ml-3" />
                      </div>
                    </TableCell>
                    <TableCell><Skeleton className="h-4 w-16" /></TableCell>
                    <TableCell><Skeleton className="h-4 w-20" /></TableCell>
                    <TableCell className="text-right">
                      <div className="flex justify-end gap-2">
                        <Skeleton className="h-4 w-8" />
                        <Skeleton className="h-4 w-12" />
                      </div>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                filteredTasks.map((task) => {
                  const project = projects.find(p => p.id === task.projectId);
                  return (
                    <TableRow key={task.id}>
                      <TableCell>
                        <div className="flex items-center">
                          <Checkbox id={`task-${task.id}`} />
                          <label htmlFor={`task-${task.id}`} className="ml-3 block text-sm font-medium text-primary-900">
                            {task.name}
                          </label>
                        </div>
                      </TableCell>
                      <TableCell>
                        {project && (
                          <Badge 
                            variant="outline" 
                            className={`inline-flex items-center px-2.5 py-0.5 rounded-md text-sm font-medium ${getProjectBadgeColor(project.name)}`}
                          >
                            {project.name}
                          </Badge>
                        )}
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center">
                          <div className={`h-8 w-8 rounded-full ${getAssigneeColor(task.assignee)} flex items-center justify-center`}>
                            <span className={`text-${getAssigneeColor(task.assignee).replace('bg-', '')}-700 text-sm font-medium`}>
                              {getInitials(task.assignee)}
                            </span>
                          </div>
                          <div className="ml-3">
                            <div className="text-sm font-medium text-primary-900">{task.assignee}</div>
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <PriorityBadge priority={task.priority} />
                      </TableCell>
                      <TableCell className="text-sm text-primary-500">{task.dueDate}</TableCell>
                      <TableCell className="text-right text-sm font-medium">
                        <Button variant="link" className="text-accent-600 hover:text-accent-900 mr-3">Edit</Button>
                        <Button variant="link" className="text-red-600 hover:text-red-900">Delete</Button>
                      </TableCell>
                    </TableRow>
                  );
                })
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      <TaskModal 
        isOpen={isTaskModalOpen} 
        onClose={() => setIsTaskModalOpen(false)}
      />
    </>
  );
};

const PriorityBadge = ({ priority }: { priority: string }) => {
  const variants: Record<string, string> = {
    'High': 'bg-red-100 text-red-800',
    'Medium': 'bg-yellow-100 text-yellow-800',
    'Low': 'bg-green-100 text-green-800',
  };

  return (
    <Badge variant="outline" className={`${variants[priority] || 'bg-gray-100 text-gray-800'} px-2 inline-flex text-xs leading-5 font-semibold rounded-full`}>
      {priority}
    </Badge>
  );
};

const getProjectBadgeColor = (name: string): string => {
  const colors: Record<string, string> = {
    'Website Redesign': 'bg-accent-100 text-accent-800',
    'Mobile App Development': 'bg-blue-100 text-blue-800',
    'CRM Integration': 'bg-purple-100 text-purple-800',
    'E-commerce Platform': 'bg-red-100 text-red-800',
  };
  return colors[name] || 'bg-gray-100 text-gray-800';
};

const getAssigneeColor = (name: string): string => {
  const colors = ['bg-accent-100', 'bg-blue-100', 'bg-green-100', 'bg-purple-100', 'bg-yellow-100'];
  // Simple hash function to consistently pick a color based on the assignee name
  const index = name.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0) % colors.length;
  return colors[index];
};

const getInitials = (name: string): string => {
  return name
    .split(' ')
    .map(word => word[0])
    .join('')
    .substring(0, 2)
    .toUpperCase();
};

export default Tasks;
